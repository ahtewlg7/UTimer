package ahtewlg7.utimer.db.autogen;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import ahtewlg7.utimer.db.converter.DateTimeTypeConverter;
import ahtewlg7.utimer.db.converter.GtdTypeConverter;
import ahtewlg7.utimer.db.entity.TaskEntityGdBean;
import ahtewlg7.utimer.enumtype.GtdType;
import org.joda.time.DateTime;

import ahtewlg7.utimer.db.entity.ActionEntityGdBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ACTION_ENTITY".
*/
public class ActionEntityGdBeanDao extends AbstractDao<ActionEntityGdBean, Long> {

    public static final String TABLENAME = "ACTION_ENTITY";

    /**
     * Properties of entity ActionEntityGdBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property GtdType = new Property(1, Integer.class, "gtdType", false, "GTD_TYPE");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property Value = new Property(3, String.class, "value", false, "VALUE");
        public final static Property AttachNum = new Property(4, int.class, "attachNum", false, "ATTACH_NUM");
        public final static Property DelayNum = new Property(5, int.class, "delayNum", false, "DELAY_NUM");
        public final static Property What = new Property(6, String.class, "what", false, "WHAT");
        public final static Property When = new Property(7, String.class, "when", false, "WHEN");
        public final static Property Who = new Property(8, String.class, "who", false, "WHO");
        public final static Property Where = new Property(9, String.class, "where", false, "WHERE");
        public final static Property Zygote = new Property(10, String.class, "zygote", false, "ZYGOTE");
        public final static Property TaskId = new Property(11, long.class, "taskId", false, "TASK_ID");
    }

    private DaoSession daoSession;

    private final GtdTypeConverter gtdTypeConverter = new GtdTypeConverter();
    private final DateTimeTypeConverter whenConverter = new DateTimeTypeConverter();

    public ActionEntityGdBeanDao(DaoConfig config) {
        super(config);
    }
    
    public ActionEntityGdBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ACTION_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"GTD_TYPE\" INTEGER," + // 1: gtdType
                "\"TITLE\" TEXT," + // 2: title
                "\"VALUE\" TEXT," + // 3: value
                "\"ATTACH_NUM\" INTEGER NOT NULL ," + // 4: attachNum
                "\"DELAY_NUM\" INTEGER NOT NULL ," + // 5: delayNum
                "\"WHAT\" TEXT," + // 6: what
                "\"WHEN\" TEXT," + // 7: when
                "\"WHO\" TEXT," + // 8: who
                "\"WHERE\" TEXT," + // 9: where
                "\"ZYGOTE\" TEXT," + // 10: zygote
                "\"TASK_ID\" INTEGER NOT NULL );"); // 11: taskId
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_ACTION_ENTITY_TITLE ON \"ACTION_ENTITY\"" +
                " (\"TITLE\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ACTION_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ActionEntityGdBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        GtdType gtdType = entity.getGtdType();
        if (gtdType != null) {
            stmt.bindLong(2, gtdTypeConverter.convertToDatabaseValue(gtdType));
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String value = entity.getValue();
        if (value != null) {
            stmt.bindString(4, value);
        }
        stmt.bindLong(5, entity.getAttachNum());
        stmt.bindLong(6, entity.getDelayNum());
 
        String what = entity.getWhat();
        if (what != null) {
            stmt.bindString(7, what);
        }
 
        DateTime when = entity.getWhen();
        if (when != null) {
            stmt.bindString(8, whenConverter.convertToDatabaseValue(when));
        }
 
        String who = entity.getWho();
        if (who != null) {
            stmt.bindString(9, who);
        }
 
        String where = entity.getWhere();
        if (where != null) {
            stmt.bindString(10, where);
        }
 
        String zygote = entity.getZygote();
        if (zygote != null) {
            stmt.bindString(11, zygote);
        }
        stmt.bindLong(12, entity.getTaskId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ActionEntityGdBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        GtdType gtdType = entity.getGtdType();
        if (gtdType != null) {
            stmt.bindLong(2, gtdTypeConverter.convertToDatabaseValue(gtdType));
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String value = entity.getValue();
        if (value != null) {
            stmt.bindString(4, value);
        }
        stmt.bindLong(5, entity.getAttachNum());
        stmt.bindLong(6, entity.getDelayNum());
 
        String what = entity.getWhat();
        if (what != null) {
            stmt.bindString(7, what);
        }
 
        DateTime when = entity.getWhen();
        if (when != null) {
            stmt.bindString(8, whenConverter.convertToDatabaseValue(when));
        }
 
        String who = entity.getWho();
        if (who != null) {
            stmt.bindString(9, who);
        }
 
        String where = entity.getWhere();
        if (where != null) {
            stmt.bindString(10, where);
        }
 
        String zygote = entity.getZygote();
        if (zygote != null) {
            stmt.bindString(11, zygote);
        }
        stmt.bindLong(12, entity.getTaskId());
    }

    @Override
    protected final void attachEntity(ActionEntityGdBean entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public ActionEntityGdBean readEntity(Cursor cursor, int offset) {
        ActionEntityGdBean entity = new ActionEntityGdBean( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : gtdTypeConverter.convertToEntityProperty(cursor.getInt(offset + 1)), // gtdType
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // value
            cursor.getInt(offset + 4), // attachNum
            cursor.getInt(offset + 5), // delayNum
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // what
            cursor.isNull(offset + 7) ? null : whenConverter.convertToEntityProperty(cursor.getString(offset + 7)), // when
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // who
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // where
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // zygote
            cursor.getLong(offset + 11) // taskId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ActionEntityGdBean entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setGtdType(cursor.isNull(offset + 1) ? null : gtdTypeConverter.convertToEntityProperty(cursor.getInt(offset + 1)));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setValue(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAttachNum(cursor.getInt(offset + 4));
        entity.setDelayNum(cursor.getInt(offset + 5));
        entity.setWhat(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setWhen(cursor.isNull(offset + 7) ? null : whenConverter.convertToEntityProperty(cursor.getString(offset + 7)));
        entity.setWho(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setWhere(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setZygote(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setTaskId(cursor.getLong(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ActionEntityGdBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ActionEntityGdBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ActionEntityGdBean entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getTaskEntityGdBeanDao().getAllColumns());
            builder.append(" FROM ACTION_ENTITY T");
            builder.append(" LEFT JOIN TASK_ENTITY T0 ON T.\"TASK_ID\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected ActionEntityGdBean loadCurrentDeep(Cursor cursor, boolean lock) {
        ActionEntityGdBean entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        TaskEntityGdBean task = loadCurrentOther(daoSession.getTaskEntityGdBeanDao(), cursor, offset);
         if(task != null) {
            entity.setTask(task);
        }

        return entity;    
    }

    public ActionEntityGdBean loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<ActionEntityGdBean> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<ActionEntityGdBean> list = new ArrayList<ActionEntityGdBean>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<ActionEntityGdBean> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<ActionEntityGdBean> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
