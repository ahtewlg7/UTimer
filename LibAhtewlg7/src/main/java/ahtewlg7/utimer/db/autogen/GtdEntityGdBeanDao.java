package ahtewlg7.utimer.db.autogen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import ahtewlg7.utimer.db.converter.DateTimeTypeConverter;
import ahtewlg7.utimer.db.converter.GtdTypeConverter;
import ahtewlg7.utimer.enumtype.GtdType;
import org.joda.time.DateTime;

import ahtewlg7.utimer.db.entity.GtdEntityGdBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GTD_ENTITY".
*/
public class GtdEntityGdBeanDao extends AbstractDao<GtdEntityGdBean, Void> {

    public static final String TABLENAME = "GTD_ENTITY";

    /**
     * Properties of entity GtdEntityGdBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Key = new Property(0, String.class, "key", false, "KEY");
        public final static Property Value = new Property(1, String.class, "value", false, "VALUE");
        public final static Property GtdType = new Property(2, Integer.class, "gtdType", false, "GTD_TYPE");
        public final static Property CreateTime = new Property(3, String.class, "createTime", false, "CREATE_TIME");
        public final static Property LastAccessTime = new Property(4, String.class, "lastAccessTime", false, "LAST_ACCESS_TIME");
    }

    private final GtdTypeConverter gtdTypeConverter = new GtdTypeConverter();
    private final DateTimeTypeConverter createTimeConverter = new DateTimeTypeConverter();
    private final DateTimeTypeConverter lastAccessTimeConverter = new DateTimeTypeConverter();

    public GtdEntityGdBeanDao(DaoConfig config) {
        super(config);
    }
    
    public GtdEntityGdBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GTD_ENTITY\" (" + //
                "\"KEY\" TEXT UNIQUE ," + // 0: key
                "\"VALUE\" TEXT," + // 1: value
                "\"GTD_TYPE\" INTEGER," + // 2: gtdType
                "\"CREATE_TIME\" TEXT," + // 3: createTime
                "\"LAST_ACCESS_TIME\" TEXT);"); // 4: lastAccessTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GTD_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GtdEntityGdBean entity) {
        stmt.clearBindings();
 
        String key = entity.getKey();
        if (key != null) {
            stmt.bindString(1, key);
        }
 
        String value = entity.getValue();
        if (value != null) {
            stmt.bindString(2, value);
        }
 
        GtdType gtdType = entity.getGtdType();
        if (gtdType != null) {
            stmt.bindLong(3, gtdTypeConverter.convertToDatabaseValue(gtdType));
        }
 
        DateTime createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(4, createTimeConverter.convertToDatabaseValue(createTime));
        }
 
        DateTime lastAccessTime = entity.getLastAccessTime();
        if (lastAccessTime != null) {
            stmt.bindString(5, lastAccessTimeConverter.convertToDatabaseValue(lastAccessTime));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GtdEntityGdBean entity) {
        stmt.clearBindings();
 
        String key = entity.getKey();
        if (key != null) {
            stmt.bindString(1, key);
        }
 
        String value = entity.getValue();
        if (value != null) {
            stmt.bindString(2, value);
        }
 
        GtdType gtdType = entity.getGtdType();
        if (gtdType != null) {
            stmt.bindLong(3, gtdTypeConverter.convertToDatabaseValue(gtdType));
        }
 
        DateTime createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(4, createTimeConverter.convertToDatabaseValue(createTime));
        }
 
        DateTime lastAccessTime = entity.getLastAccessTime();
        if (lastAccessTime != null) {
            stmt.bindString(5, lastAccessTimeConverter.convertToDatabaseValue(lastAccessTime));
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public GtdEntityGdBean readEntity(Cursor cursor, int offset) {
        GtdEntityGdBean entity = new GtdEntityGdBean();
        readEntity(cursor, entity, offset);
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GtdEntityGdBean entity, int offset) {
        entity.setKey(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setValue(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setGtdType(cursor.isNull(offset + 2) ? null : gtdTypeConverter.convertToEntityProperty(cursor.getInt(offset + 2)));
        entity.setCreateTime(cursor.isNull(offset + 3) ? null : createTimeConverter.convertToEntityProperty(cursor.getString(offset + 3)));
        entity.setLastAccessTime(cursor.isNull(offset + 4) ? null : lastAccessTimeConverter.convertToEntityProperty(cursor.getString(offset + 4)));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(GtdEntityGdBean entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(GtdEntityGdBean entity) {
        return null;
    }

    @Override
    public boolean hasKey(GtdEntityGdBean entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
